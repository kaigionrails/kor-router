<% primary_host = ENV.fetch('PRIMARY_HOST', 'kor-router.herokuapp.com') %>

daemon off;
#Heroku dynos have 4 cores.
worker_processes 4;

events {
  use epoll;
  accept_mutex on;
  worker_connections 1024;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id '
    '$http_x_forwarded_for - $remote_user [$time_local] '
    '"$request" $status $bytes_sent '
    '"$http_referer" "$http_user_agent" "$gzip_ratio"';

  log_format csp_report 'measure#nginx.service=$request_time request_id=$http_x_request_id xff=$http_x_forwarded_for referer="$http_referer" ua="$http_user_agent" csp.report=$request_body';
  map $status $csp_loggable {
      "200"  1;
      default 0;
  }
  map $content_type $csp_bad_content_type {
      default 1;
      "application/json" 0;
      "application/csp-report" 0;
  }

  access_log logs/nginx/access.log l2met;
  error_log logs/nginx/access.log;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  port_in_redirect off;

  proxy_ssl_server_name on;

  rewrite_log <%= ENV.fetch("REWRITE_LOG", 'on') %>;

  server {
    listen <%= ENV["PORT"] %>;
    server_name <%= primary_host %>;

    set $csp_policy "";
    if ($http_x_forwarded_proto = "https") {
      set $csp_policy "default-src https: 'self' 'unsafe-inline' 'unsafe-eval'; font-src fonts.gstatic.com data:; report-uri https://<%= primary_host %>/_csp";
    }
    add_header Content-Security-Policy-Report-Only "$csp_policy";

    location = /_200 {
      access_log off;
      return 200;
    }

    location = /_csp {
      if ($request_method != "POST") {
          return 405;
      }

      if ($csp_bad_content_type) {
          return 415;
      }

      access_log logs/nginx/access.log csp_report;

      # To enable $request_body
      proxy_set_header Host localhost;
      proxy_pass http://localhost:<%= ENV["PORT"] %>/_200;
    }


    location ~ ^/2020(.*) {
      include force_https.conf;
      proxy_pass https://past.kaigionrails.org;
    }

    location ~ ^/2021(.*) {
      include force_https.conf;
      proxy_pass https://past.kaigionrails.org;
    }

    location ~ ^/2022(.*) {
      include force_https.conf;
      proxy_pass https://2022.kaigionrails.org;
    }

    # current event
    location = / {
        return 302 https://<%= primary_host %>/2022;
    }
  }
}
